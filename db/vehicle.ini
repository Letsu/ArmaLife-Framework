[Default]
Version = 12
Strip Chars = ""
;; List of characters to strip out
Strip Chars Mode = 1
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.
Input SQF Parser = false
;; Expermential
;;   If enabled will use SQF Array Parser instead of : seperator for values
;;   i.e   0:SQL:UpdatePlayer:["Joe",[1,2,0],0.22333,"PlayerBackpack",-3]
;;   Advantage is that you dont need to strip : seperator from user inputted values
; --------------------------------------------------------------------------------

[CreateVehicle]
SQL1_1 = INSERT INTO `vehicles` (
SQL1_2 = `plate`, `type`, `ownerPID`, `ownerName`, `keyOwner`, `keyOwnerNames`, `fuel`, `inventory`)
SQL1_3 = VALUES (?, ?, ?, ?, ?, ?, ?, ?)

SQL1_INPUTS = 1,2,3,4,5,6,7,8

[GetVehicles]
SQL1_1 = SELECT * FROM `vehicles` WHERE OwnerPID=? && alive = 0 && available = 0

SQL1_INPUTS = 1
OUTPUT = 1-String2, 2-String2, 3-String2, 4-String2, 5-String2, 6-String2, 7-String2, 8-String2, 9-String2, 10-String2, 11-String2

[DestroyVehicle]
SQL1_1 = UPDATE vehicles SET alive=1 WHERE plate=?

SQL1_INPUTS = 1

[DisableVehicle]
SQL1_1 = UPDATE vehicles SET available=1 WHERE plate=?

SQL1_INPUTS = 1

[EnableVehicle]
SQL1_1 = UPDATE vehicles SET available=0 WHERE plate=?

SQL1_INPUTS = 1

[UpdateKeys]
SQL1_1 = UPDATE vehicles SET keyOwner=? WHERE plate=?

SQL1_INPUTS = 1, 2

[UpdateKeysNames]
SQL1_1 = UPDATE vehicles SET keyOwnerNames=? WHERE plate=?

SQL1_INPUTS = 1, 2

[UpdateFuel]
SQL1_1 = UPDATE vehicles SET fuel=? WHERE plate=?

SQL1_INPUTS = 1,2


[GetVehiclePlate]
SQL1_1 = SELECT plate FROM `vehicles`

OUTPUT = 1-String2

[ResetVehicles]
SQL1_1 = CALL enableVehicles
