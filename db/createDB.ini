[Default]
Version = 12
Strip Chars = ""
;; List of characters to strip out
Strip Chars Mode = 1
;; 0 = Strip Bad Chars, 1 = Strip + Log Bad Chars, 2 = Return Error & Log Bad Chars
;;     Note: Logging on works when sending data to database.
Input SQF Parser = false
;; Expermential
;;   If enabled will use SQF Array Parser instead of : seperator for values
;;   i.e   0:SQL:UpdatePlayer:["Joe",[1,2,0],0.22333,"PlayerBackpack",-3]
;;   Advantage is that you dont need to strip : seperator from user inputted values
; --------------------------------------------------------------------------------

;;create Player Db
[CreatePlayerDB]
SQL1_1 = CREATE TABLE IF NOT EXISTS `arma`.`players`  (
SQL1_2 = `PID` varchar(17) NOT NULL,
SQL1_3 = `money` int(255) NOT NULL,
SQL1_4 = `bank` int(255) NOT NULL,
SQL1_5 = `licenses` varchar(2500) NOT NULL,
SQL1_6 = `inventory` varchar(2500) NOT NULL,
SQL1_7 = PRIMARY KEY (`PID`)
SQL1_8 = );

;;Passport Table
[CreatePassportDB]
SQL1_1 = CREATE TABLE IF NOT EXISTS `arma`.`passport`  (
SQL1_2 = `PID` varchar(17) NOT NULL,
SQL1_3 = `name` char(255) NOT NULL,
SQL1_4 = `birth` char(255) NOT NULL,
SQL1_5 = `residence` char(255) NOT NULL,
SQL1_6 = `gender` enum('Male','Female') NOT NULL DEFAULT 'Male',
SQL1_7 = PRIMARY KEY (`PID`)
SQL1_8 = );

[CreateCopDB]
SQL1_1 = CREATE TABLE IF NOT EXISTS `arma`.`cop`  (
SQL1_2 = `serviceNumber` int(6) NOT NULL,
SQL1_3 = `PID` varchar(17) NOT NULL,
SQL1_4 = `rank` int(25) NOT NULL DEFAULT 1,
SQL1_5 = PRIMARY KEY (`serviceNumber`, `PID`)
SQL1_6 = );

[CreateMedDB]
SQL1_1 = CREATE TABLE IF NOT EXISTS `arma`.`med`  (
SQL1_2 = `serviceNumber` int(6) NOT NULL,
SQL1_3 = `PID` varchar(17) NOT NULL,
SQL1_4 = `rank` int(25) NOT NULL DEFAULT 1,
SQL1_5 = PRIMARY KEY (`serviceNumber`, `PID`)
SQL1_6 = );

[CreateVehicleDB]
SQL1_1 =  CREATE TABLE IF NOT EXISTS `arma`.`vehicles`  (
SQL1_2 = `id` int(6) NOT NULL AUTO_INCREMENT,
SQL1_3 = `plate` int(6) NOT NULL,
SQL1_4 = `type` char(255) NOT NULL,
SQL1_5 = `ownerPID` varchar(17) NOT NULL,
SQL1_6 = `ownerName` varchar(17) NOT NULL,
SQL1_7 = `keyOwner` char(255) NOT NULL,
SQL1_8 = `keyOwnerNames` char(255) NOT NULL,
SQL1_9 = `fuel` int(100) NOT NULL DEFAULT 100,
SQL1_10 = `inventory` text(1000) NOT NULL,
SQL1_11 = `available` tinyint(2) NOT NULL DEFAULT 0,
SQL1_12 = `alive` tinyint(2) NOT NULL DEFAULT 1,
SQL1_13 = PRIMARY KEY (`id`)
SQL1_14 = );
